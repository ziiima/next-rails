/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * (title)
 * OpenAPI spec version: 0.0.0
 */
import { faker } from '@faker-js/faker'
import { HttpResponse, delay, http } from 'msw'
import type {
  ArticleAPIArticleDeleteResponse,
  ArticleAPIArticleResponse,
} from '.././model'

export const getReadArticleResponseMock = (
  overrideResponse: Partial<ArticleAPIArticleResponse> = {},
): ArticleAPIArticleResponse => ({
  article: {
    body: faker.word.sample(),
    id: faker.number.int({ min: undefined, max: undefined }),
    title: faker.word.sample(),
  },
  ...overrideResponse,
})

export const getUpdateArticleResponseMock = (
  overrideResponse: Partial<ArticleAPIArticleResponse> = {},
): ArticleAPIArticleResponse => ({
  article: {
    body: faker.word.sample(),
    id: faker.number.int({ min: undefined, max: undefined }),
    title: faker.word.sample(),
  },
  ...overrideResponse,
})

export const getDeleteArticleResponseMock = (
  overrideResponse: Partial<ArticleAPIArticleDeleteResponse> = {},
): ArticleAPIArticleDeleteResponse => ({
  id: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
})

export const getReadArticleMockHandler = (
  overrideResponse?:
    | ArticleAPIArticleResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ArticleAPIArticleResponse> | ArticleAPIArticleResponse),
) => {
  return http.get('*/articles/:id', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getReadArticleResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getUpdateArticleMockHandler = (
  overrideResponse?:
    | ArticleAPIArticleResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<ArticleAPIArticleResponse> | ArticleAPIArticleResponse),
) => {
  return http.put('*/articles/:id', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateArticleResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getDeleteArticleMockHandler = (
  overrideResponse?:
    | ArticleAPIArticleDeleteResponse
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) =>
        | Promise<ArticleAPIArticleDeleteResponse>
        | ArticleAPIArticleDeleteResponse),
) => {
  return http.delete('*/articles/:id', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteArticleResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}
export const getArticlesMock = () => [
  getReadArticleMockHandler(),
  getUpdateArticleMockHandler(),
  getDeleteArticleMockHandler(),
]
