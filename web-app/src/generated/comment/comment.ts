/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * (title)
 * OpenAPI spec version: 0.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import type {
  ArticleCommentAPIArticleCommentListResponse,
  ArticleCommentAPIArticleCommentResponses,
  ArticleOperationNotFoundArticle,
  ArticleOperationParameterInavlid,
  CreateArticleCommentBody,
} from '.././model'
import { restclient } from '../../utils/rest-client'

export const getArticleComments = (id: number, signal?: AbortSignal) => {
  return restclient<ArticleCommentAPIArticleCommentListResponse>({
    url: `/articles/${id}/comments`,
    method: 'GET',
    signal,
  })
}

export const getGetArticleCommentsQueryKey = (id: number) => {
  return [`/articles/${id}/comments`] as const
}

export const getGetArticleCommentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getArticleComments>>,
  TError = ArticleOperationNotFoundArticle,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getArticleComments>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetArticleCommentsQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getArticleComments>>
  > = ({ signal }) => getArticleComments(id, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getArticleComments>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetArticleCommentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getArticleComments>>
>
export type GetArticleCommentsQueryError = ArticleOperationNotFoundArticle

export function useGetArticleComments<
  TData = Awaited<ReturnType<typeof getArticleComments>>,
  TError = ArticleOperationNotFoundArticle,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getArticleComments>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArticleComments>>,
          TError,
          TData
        >,
        'initialData'
      >
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetArticleComments<
  TData = Awaited<ReturnType<typeof getArticleComments>>,
  TError = ArticleOperationNotFoundArticle,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getArticleComments>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getArticleComments>>,
          TError,
          TData
        >,
        'initialData'
      >
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetArticleComments<
  TData = Awaited<ReturnType<typeof getArticleComments>>,
  TError = ArticleOperationNotFoundArticle,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getArticleComments>>,
        TError,
        TData
      >
    >
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetArticleComments<
  TData = Awaited<ReturnType<typeof getArticleComments>>,
  TError = ArticleOperationNotFoundArticle,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getArticleComments>>,
        TError,
        TData
      >
    >
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetArticleCommentsQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const createArticleComment = (
  id: number,
  createArticleCommentBody: CreateArticleCommentBody,
) => {
  return restclient<ArticleCommentAPIArticleCommentResponses>({
    url: `/articles/${id}/comments`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createArticleCommentBody,
  })
}

export const getCreateArticleCommentMutationOptions = <
  TError = ArticleOperationParameterInavlid | ArticleOperationNotFoundArticle,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createArticleComment>>,
    TError,
    { id: number; data: CreateArticleCommentBody },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createArticleComment>>,
  TError,
  { id: number; data: CreateArticleCommentBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createArticleComment>>,
    { id: number; data: CreateArticleCommentBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return createArticleComment(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateArticleCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof createArticleComment>>
>
export type CreateArticleCommentMutationBody = CreateArticleCommentBody
export type CreateArticleCommentMutationError =
  | ArticleOperationParameterInavlid
  | ArticleOperationNotFoundArticle

export const useCreateArticleComment = <
  TError = ArticleOperationParameterInavlid | ArticleOperationNotFoundArticle,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createArticleComment>>,
    TError,
    { id: number; data: CreateArticleCommentBody },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof createArticleComment>>,
  TError,
  { id: number; data: CreateArticleCommentBody },
  TContext
> => {
  const mutationOptions = getCreateArticleCommentMutationOptions(options)

  return useMutation(mutationOptions)
}
