/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * (title)
 * OpenAPI spec version: 0.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import type { Blog, BlogsCreateBody, BlogsList200 } from '.././model'
import { restclient } from '../../utils/rest-client'

export const blogsCreate = (blogsCreateBody: BlogsCreateBody) => {
  return restclient<Blog>({
    url: `/blogs`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: blogsCreateBody,
  })
}

export const getBlogsCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof blogsCreate>>,
    TError,
    { data: BlogsCreateBody },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof blogsCreate>>,
  TError,
  { data: BlogsCreateBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof blogsCreate>>,
    { data: BlogsCreateBody }
  > = (props) => {
    const { data } = props ?? {}

    return blogsCreate(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type BlogsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof blogsCreate>>
>
export type BlogsCreateMutationBody = BlogsCreateBody
export type BlogsCreateMutationError = unknown

export const useBlogsCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof blogsCreate>>,
    TError,
    { data: BlogsCreateBody },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof blogsCreate>>,
  TError,
  { data: BlogsCreateBody },
  TContext
> => {
  const mutationOptions = getBlogsCreateMutationOptions(options)

  return useMutation(mutationOptions)
}
export const blogsList = (signal?: AbortSignal) => {
  return restclient<BlogsList200>({ url: `/blogs`, method: 'GET', signal })
}

export const getBlogsListQueryKey = () => {
  return [`/blogs`] as const
}

export const getBlogsListQueryOptions = <
  TData = Awaited<ReturnType<typeof blogsList>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof blogsList>>, TError, TData>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getBlogsListQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof blogsList>>> = ({
    signal,
  }) => blogsList(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof blogsList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type BlogsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof blogsList>>
>
export type BlogsListQueryError = unknown

export function useBlogsList<
  TData = Awaited<ReturnType<typeof blogsList>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof blogsList>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getBlogsListQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
