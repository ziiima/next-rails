/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * (title)
 * OpenAPI spec version: 0.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import type { Blog, CreateBlogBody, ResourceReadBlogs200 } from '.././model'
import { restclient } from '../../utils/rest-client'

export const createBlog = (createBlogBody: CreateBlogBody) => {
  return restclient<Blog>({
    url: `/blogs`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createBlogBody,
  })
}

export const getCreateBlogMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createBlog>>,
    TError,
    { data: CreateBlogBody },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createBlog>>,
  TError,
  { data: CreateBlogBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createBlog>>,
    { data: CreateBlogBody }
  > = (props) => {
    const { data } = props ?? {}

    return createBlog(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateBlogMutationResult = NonNullable<
  Awaited<ReturnType<typeof createBlog>>
>
export type CreateBlogMutationBody = CreateBlogBody
export type CreateBlogMutationError = unknown

export const useCreateBlog = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createBlog>>,
    TError,
    { data: CreateBlogBody },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof createBlog>>,
  TError,
  { data: CreateBlogBody },
  TContext
> => {
  const mutationOptions = getCreateBlogMutationOptions(options)

  return useMutation(mutationOptions)
}
export const resourceReadBlogs = (signal?: AbortSignal) => {
  return restclient<ResourceReadBlogs200>({
    url: `/blogs`,
    method: 'GET',
    signal,
  })
}

export const getResourceReadBlogsQueryKey = () => {
  return [`/blogs`] as const
}

export const getResourceReadBlogsQueryOptions = <
  TData = Awaited<ReturnType<typeof resourceReadBlogs>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof resourceReadBlogs>>,
      TError,
      TData
    >
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getResourceReadBlogsQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof resourceReadBlogs>>
  > = ({ signal }) => resourceReadBlogs(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof resourceReadBlogs>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ResourceReadBlogsQueryResult = NonNullable<
  Awaited<ReturnType<typeof resourceReadBlogs>>
>
export type ResourceReadBlogsQueryError = unknown

export function useResourceReadBlogs<
  TData = Awaited<ReturnType<typeof resourceReadBlogs>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof resourceReadBlogs>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof resourceReadBlogs>>,
        TError,
        TData
      >,
      'initialData'
    >
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useResourceReadBlogs<
  TData = Awaited<ReturnType<typeof resourceReadBlogs>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof resourceReadBlogs>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof resourceReadBlogs>>,
        TError,
        TData
      >,
      'initialData'
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useResourceReadBlogs<
  TData = Awaited<ReturnType<typeof resourceReadBlogs>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof resourceReadBlogs>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useResourceReadBlogs<
  TData = Awaited<ReturnType<typeof resourceReadBlogs>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof resourceReadBlogs>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getResourceReadBlogsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
