/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * (title)
 * OpenAPI spec version: 0.0.0
 */
import { faker } from '@faker-js/faker'
import { HttpResponse, delay, http } from 'msw'
import type { Blog, BlogsList200 } from '.././model'

export const getBlogsCreateResponseMock = (
  overrideResponse: Partial<Blog> = {},
): Blog => ({
  id: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
})

export const getBlogsListResponseMock = (
  overrideResponse: Partial<BlogsList200> = {},
): BlogsList200 => ({
  currentPage: faker.number.int({ min: undefined, max: undefined }),
  items: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({ id: faker.number.int({ min: undefined, max: undefined }) })),
  perPage: faker.number.int({ min: undefined, max: undefined }),
  totalCount: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
})

export const getBlogsCreateMockHandler = (
  overrideResponse?:
    | Blog
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Blog> | Blog),
) => {
  return http.post('*/blogs', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getBlogsCreateResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getBlogsListMockHandler = (
  overrideResponse?:
    | BlogsList200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<BlogsList200> | BlogsList200),
) => {
  return http.get('*/blogs', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getBlogsListResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}
export const getBlogMock = () => [
  getBlogsCreateMockHandler(),
  getBlogsListMockHandler(),
]
