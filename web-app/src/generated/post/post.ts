/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * (title)
 * OpenAPI spec version: 0.0.0
 */
import { useQuery } from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import type { PostAPIPostListResponse } from '.././model'
import { restclient } from '../../utils/rest-client'

export const listPosts = (signal?: AbortSignal) => {
  return restclient<PostAPIPostListResponse>({
    url: `/posts`,
    method: 'GET',
    signal,
  })
}

export const getListPostsQueryKey = () => {
  return [`/posts`] as const
}

export const getListPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof listPosts>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listPosts>>, TError, TData>
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getListPostsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listPosts>>> = ({
    signal,
  }) => listPosts(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listPosts>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type ListPostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listPosts>>
>
export type ListPostsQueryError = unknown

export function useListPosts<
  TData = Awaited<ReturnType<typeof listPosts>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listPosts>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof listPosts>>,
        TError,
        TData
      >,
      'initialData'
    >
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useListPosts<
  TData = Awaited<ReturnType<typeof listPosts>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listPosts>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof listPosts>>,
        TError,
        TData
      >,
      'initialData'
    >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useListPosts<
  TData = Awaited<ReturnType<typeof listPosts>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listPosts>>, TError, TData>
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useListPosts<
  TData = Awaited<ReturnType<typeof listPosts>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listPosts>>, TError, TData>
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getListPostsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
