openapi: 3.0.0
info:
  title: (title)
  version: 0.0.0
tags:
  - name: blog
  - name: article
  - name: comment
  - name: post
paths:
  /articles:
    get:
      operationId: listArticles
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleAPI.ArticleListResponse'
      tags:
        - article
    post:
      operationId: createArticle
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleAPI.ArticleResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleOperation.ParameterInavlid'
      tags:
        - article
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dto:
                  $ref: '#/components/schemas/ArticleOperation.CreateArticleDTO'
              required:
                - dto
  /articles/{id}:
    get:
      operationId: readArticle
      parameters:
        - $ref: '#/components/parameters/ArticleAPI.ArticleDetailParameter'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleAPI.ArticleResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleOperation.NotFoundArticle'
      tags:
        - article
    put:
      operationId: updateArticle
      parameters:
        - $ref: '#/components/parameters/ArticleAPI.ArticleDetailParameter'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleAPI.ArticleResponse'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleOperation.ParameterInavlid'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleOperation.NotFoundArticle'
      tags:
        - article
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dto:
                  $ref: '#/components/schemas/ArticleOperation.UpdateArticleDTO'
              required:
                - dto
    delete:
      operationId: deleteArticle
      parameters:
        - $ref: '#/components/parameters/ArticleAPI.ArticleDetailParameter'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleAPI.ArticleDeleteResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleOperation.NotFoundArticle'
      tags:
        - article
  /articles/{id}/comments:
    get:
      operationId: getArticleComments
      parameters:
        - $ref: '#/components/parameters/ArticleAPI.ArticleDetailParameter'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleCommentAPI.ArticleCommentListResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleOperation.NotFoundArticle'
      tags:
        - comment
    post:
      operationId: createArticleComment
      parameters:
        - $ref: '#/components/parameters/ArticleAPI.ArticleDetailParameter'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleCommentAPI.ArticleCommentResponses'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleOperation.ParameterInavlid'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleOperation.NotFoundArticle'
      tags:
        - comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dto:
                  $ref: '#/components/schemas/ArticleCommentOperation.CreateCommentDTO'
              required:
                - dto
  /blogs:
    post:
      operationId: createBlog
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
      tags:
        - blog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dto:
                  $ref: '#/components/schemas/CreateBlogContent'
              required:
                - dto
    get:
      operationId: resourceReadBlogs
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - currentPage
                  - perPage
                  - totalCount
                  - items
                properties:
                  currentPage:
                    type: integer
                    format: uint64
                  perPage:
                    type: integer
                    format: uint64
                  totalCount:
                    type: integer
                    format: uint64
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Blog'
      tags:
        - blog
  /posts:
    get:
      operationId: listPosts
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostAPI.PostListResponse'
      tags:
        - post
components:
  parameters:
    ArticleAPI.ArticleDetailParameter:
      name: id
      in: path
      required: true
      schema:
        type: integer
  schemas:
    Article:
      type: object
      required:
        - id
        - title
        - body
        - status
      properties:
        id:
          $ref: '#/components/schemas/ArticleId'
        title:
          $ref: '#/components/schemas/ArticleTitle'
        body:
          $ref: '#/components/schemas/ArticleBody'
        status:
          oneOf:
            - $ref: '#/components/schemas/ArticleStatus'
          nullable: true
      description: |-
        Generated by scaffdog
        feature name is article
        created at 2024/10/29
    ArticleAPI.ArticleDeleteResponse:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/ArticleId'
    ArticleAPI.ArticleListResponse:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Article'
    ArticleAPI.ArticleResponse:
      type: object
      required:
        - article
      properties:
        article:
          $ref: '#/components/schemas/Article'
    ArticleBody:
      type: string
      minLength: 10
    ArticleCommentAPI.ArticleCommentListResponse:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    ArticleCommentAPI.ArticleCommentResponses:
      type: object
      required:
        - comment
      properties:
        comment:
          $ref: '#/components/schemas/Comment'
    ArticleCommentOperation.CreateCommentDTO:
      type: object
      required:
        - body
        - commenter
      properties:
        body:
          $ref: '#/components/schemas/CommentBody'
        commenter:
          $ref: '#/components/schemas/Commenter'
        status:
          $ref: '#/components/schemas/CommentStatus'
    ArticleId:
      type: integer
    ArticleOperation.CreateArticleDTO:
      type: object
      required:
        - title
        - body
        - status
      properties:
        title:
          $ref: '#/components/schemas/ArticleTitle'
        body:
          $ref: '#/components/schemas/ArticleBody'
        status:
          oneOf:
            - $ref: '#/components/schemas/CommentStatus'
          nullable: true
    ArticleOperation.NotFoundArticle:
      type: object
    ArticleOperation.ParameterInavlid:
      type: object
    ArticleOperation.UpdateArticleDTO:
      type: object
      required:
        - title
        - body
      properties:
        title:
          $ref: '#/components/schemas/ArticleTitle'
        body:
          $ref: '#/components/schemas/ArticleBody'
    ArticleStatus:
      type: string
      enum:
        - public
        - private
        - archived
    ArticleTitle:
      type: string
      minLength: 1
      maxLength: 255
    Blog:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: uint64
          readOnly: true
    Comment:
      type: object
      required:
        - id
        - commenter
        - body
        - status
      properties:
        id:
          $ref: '#/components/schemas/CommentId'
        commenter:
          $ref: '#/components/schemas/Commenter'
        body:
          $ref: '#/components/schemas/CommentBody'
        status:
          oneOf:
            - $ref: '#/components/schemas/CommentStatus'
          nullable: true
    CommentBody:
      type: string
      minLength: 1
    CommentId:
      type: integer
    CommentStatus:
      type: string
      enum:
        - public
        - private
        - archived
    Commenter:
      type: string
      minLength: 1
      maxLength: 255
    CreateBlogContent:
      type: object
      required:
        - title
      properties:
        title:
          $ref: '#/components/schemas/blogTitle'
    Post:
      type: object
      required:
        - id
        - title
        - body
      properties:
        id:
          $ref: '#/components/schemas/PostId'
        title:
          $ref: '#/components/schemas/PostTitle'
        body:
          $ref: '#/components/schemas/PostBody'
      description: |-
        Generated by scaffdog
        feature name is post
        created at 2024/11/07
    PostAPI.PostListResponse:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Post'
    PostBody:
      type: string
    PostId:
      type: integer
    PostTitle:
      type: string
      minLength: 1
      maxLength: 255
    blogTitle:
      type: string
      minLength: 1
      maxLength: 255
    uuidv4:
      type: string
      format: uuid
